------------------------------------------------------------------------------------
*Tìm các số nguyên tố <= n. ĐPT: O(NlogN)
------------------------------------------------------------------------------------
void sieve(int N) {
    bool isPrime[N+1];
    for(int i = 0; i <= N;++i) {
        isPrime[i] = true;
    }
    isPrime[0] = false;
    isPrime[1] = false;
    for(int i = 2; i * i <= N; ++i) {
         if(isPrime[i] == true) {
             for(int j = i * i; j <= N; j += i)
                 isPrime[j] = false;
        }
    }
}
------------------------------------------------------------------------------------
Phân tích thừa số nguyên tố với sàng Eratosthenes		
------------------------------------------------------------------------------------
int minPrime[n + 1];
for (int i = 2; i * i <= n; ++i) {
    if (minPrime[i] == 0) { //if i is prime
        for (int j = i * i; j <= n; j += i) {
            if (minPrime[j] == 0) {
                minPrime[j] = i;
            }
        }
    }
}
for (int i = 2; i <= n; ++i) {
    if (minPrime[i] == 0) {
        minPrime[i] = i;
    }
}
vector<int> factorize(int n) {
    vector<int> res;
    while (n != 1) {
        res.push_back(minPrime[n]);
        n /= minPrime[n];
    }
    return res;
}
------------------------------------------------------------------------------------
Sàng Eratosthenes trên đoạn
------------------------------------------------------------------------------------
vector<bool> isPrime(R - L + 1, true);  // x là số nguyên tố khi và chỉ khi isPrime[x - l] == true
for (long long i = 2; i * i <= R; ++i) {
    for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i) {
        isPrime[j - L] = false;
    }
}
if (1 >= L) {  // Xét riêng trường hợp số 1
    isPrime[1 - L] = false;
}
for (long long x = L; x <= R; ++x) {
    if (isPrime[x - L]) {
        // i là số nguyên tố
    }
}
1.1.2 Kiểm tra 1 số có phải số nguyên tố hay không
------------------------------------------------------------------------------------
Sử dụng định lý Fermat
------------------------------------------------------------------------------------
u64 binpower(u64 base, u64 e, u64 mod) {
    u64 result = 1;
    base %= mod;
    while (e) {
        if (e & 1)
            result = (u128)result * base % mod;
        base = (u128)base * base % mod;
        e >>= 1;
    }
    return result;
}
bool probablyPrimeFermat(int n, int iter=5) {
    if (n < 4)
        return n == 2 || n == 3;

    for (int i = 0; i < iter; i++) {
        int a = 2 + rand() % (n - 3);
        if (binpower(a, n - 1, n) != 1)
            return false;
    }
    return true;
}
------------------------------------------------------------------------------------
Kiểm tra bằng rabin-miller
n < 2 047: 2
n < 1 373 653: 2, 3
n < 9 080 191: 31, 73
n < 4 759 123 141: 2, 7, 61
n < 1 122 004 669 633: 2, 13, 23, 1662803
n < 2 152 302 898 747: 2, 3, 5, 7, 11
n < 3 474 749 660 383: 2, 3, 5, 7, 11, 13
n < 341 550 071 728 321: 2, 3, 5, 7, 11, 13, 17
n < 3 825 123 056 546 413 051: 2, 3, 5, 7, 11, 13, 17, 19, 23
n < 318 665 857 834 031 151 167 461: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37
n < 3 317 044 064 679 887 385 961 981: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41
------------------------------------------------------------------------------------
uint64_t mulmod(uint64_t a, uint64_t b, uint64_t n) {
    uint64_t r = 0;
    if ((a|b) < (1ULL << 32)) return (a*b) % n;
    if (a < b) { uint64_t t = a; a = b; b = t; }
    if (n <= (1ULL << 63)) {
        while (b > 0) {
            if (b & 1)  { r += a;  if (r >= n) r -= n; }
            b >>= 1;
            if (b)      { a += a;  if (a >= n) a -= n; }
        }
    } else {
        while (b > 0) {
            if (b & 1)  r = ((n-r) > a) ? r+a : r+a-n;    
            b >>= 1;
            if (b)      a = ((n-a) > a) ? a+a : a+a-n;    
        }
    }
    return r;
}
ll pow(ll a, ll d, ll n) {
	ll result = 1;
	a = a % n;
	while (d > 0) {
		if (d & 1) result = mulmod(result, a, n); 
		d >>= 1;
		a = mulmod(a, a, n);
	}
	return result;
}
pair<ll, ll> factor(ll n) {
	ll s = 0;
	while ((n & 1) == 0) {
		s++;
		n >>= 1;
	}
	return {s, n};
}
bool witness_test(ll s, ll d, ll n, ll witness) {
	if (n == witness) return true;
	ll p = pow(witness, d, n);
	if (p == 1) return true;
	for (; s > 0; s--) {
		if (p == n-1) return true;
		p = mulmod(p, p, n);
	}
	return false;
}
bool miller(ll n) {
	if (n < 2) return false;
	if ((n & 1) == 0) return n == 2;
	ll s, d;
	tie(s, d) = factor(n-1);
	return witness_test(s, d, n, 2) && witness_test(s, d, n, 7) && witness_test(s, d, n, 3)
	       && witness_test(s, d, n, 5) && witness_test(s, d, n, 11) && witness_test(s, d, n, 13) && witness_test(s, d, n, 17);
}
------------------------------------------------------------------------------------
Đếm các ước nguyên dương của các số nguyên
------------------------------------------------------------------------------------
for (int i = 1; i < N; i++){
	for (int j = i; j < N; j += i){
		sum[j]++;
	}
}
------------------------------------------------------------------------------------
Tính C(k, n) mod
------------------------------------------------------------------------------------
const long long mod = 1000000007;
long long fact[100005], invFact[100005];
int n, k;
long long power(const long long x, long long n) {
	if (n == 0) {
		return 1LL;
	}
	long long ret = power(x, n >> 1);
	(ret *= ret) %= mod;
	if (n % 2 == 1) {
		(ret *= x) %= mod;
	}
	return ret;
}
long long C(int k, int n) {
	long long ret = fact[n];
	(ret *= invFact[k]) %= mod;
	(ret *= invFact[n - k]) %= mod;
	return ret;
}
int main () {
	cin >> n >> k;
	fact[0] = 1LL;
	invFact[0] = 1LL;
	for (int i = 1; i <= n; i++) {
		fact[i] = (fact[i - 1] * (long long) i) % mod;
		invFact[i] = power(fact[i], mod - 2);
	}
	return 0;
}
------------------------------------------------------------------------------------
Tính khoảng cách 2 ngày
/* Rata Die day one is 0001-01-01 (Lấy mốc là ngày 1 tháng 1 năm 1)*/
------------------------------------------------------------------------------------
int rdn(int y, int m, int d) { 
 if (m < 3)
  y--, m += 12;
 return 365 * y + y / 4 - y / 100 + y / 400 + (153 * m - 457) / 5 + d - 306;
}
------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
Tính lũy thừa mod số lớn
------------------------------------------------------------------------------------
long long Pow (long long x, long long n) {
	if (n == 0) return 1;
	long long ret = Pow (x, n / 2);
	(ret *= ret) %= 1000000007;
	if (n % 2 == 1) (ret *= x) %= 1000000007;
	return ret;
}
------------------------------------------------------------------------------------
Hàm merge trộn 2 dãy và sắp xếp tăng dần
------------------------------------------------------------------------------------
int main () {
	int first[] = {5,10,15,20,25};
	int second[] = {50,40,30,20,10};
	std::vector<int> v(10);
	std::sort (first,first+5);
	std::sort (second,second+5);
	std::merge (first,first+5,second,second+5,v.begin());
}
------------------------------------------------------------------------------------
Số số nguyên tố cùng nhau với N trong đoạn từ 1 đến N
------------------------------------------------------------------------------------
//Cách 1:
int phi(int n) {
    int res = n;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            while (n % i == 0) {
                n /= i;
            }
            res -= res / i;
        }
    }
    if (n != 1) {
        res -= res / n;
    }
    return res;
}
// Cách 2:
int eulerPhi(int n) { // = n (1-1/p1) ... (1-1/pn)
    if (n == 0) return 0;
    int ans = n;
    for (int x = 2; x*x <= n; ++x) {
        if (n % x == 0) {
            ans -= ans / x;
            while (n % x == 0) n /= x;
        }
    }
    if (n > 1) ans -= ans / n;
    return ans;
}
------------------------------------------------------------------------------------
Nhân ma trận tính số Fibonaci
------------------------------------------------------------------------------------
const int mod = 111539786;
using type = int; 
struct Matrix {
    vector <vector <type> > data;
    int row() const { return data.size(); } 
    int col() const { return data[0].size(); }
    auto & operator [] (int i) { return data[i]; }
    const auto & operator[] (int i) const { return data[i]; }
    Matrix() = default;
    Matrix(int r, int c): data(r, vector <type> (c)) { }
    Matrix(const vector <vector <type> > &d): data(d) { }
    friend ostream & operator << (ostream &out, const Matrix &d) {
        for (auto x : d.data) {
            for (auto y : x) out << y << ' ';
            out << '\n';
        }
        return out;
    }
    static Matrix identity(long long n) {
        Matrix a = Matrix(n, n);
        while (n--) a[n][n] = 1;
        return a;
    }
    Matrix operator * (const Matrix &b) {
        Matrix a = *this;
        assert(a.col() == b.row()); 
        Matrix c(a.row(), b.col());
        for (int i = 0; i < a.row(); ++i)
            for (int j = 0; j < b.col(); ++j)
                for (int k = 0; k < a.col(); ++k){
                    c[i][j] += 1ll * a[i][k] % mod * (b[k][j] % mod) % mod;
                    c[i][j] %= mod;
                }
        return c;
    }
    Matrix pow(long long exp) {
        assert(row() == col());  
        Matrix base = *this, ans = identity(row());
        for (; exp > 0; exp >>= 1, base = base * base)
            if (exp & 1) ans = ans * base;
        return ans;
    }
};
int main(){
    Matrix a({
        {1, 1},
        {1, 0}
    });
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        Matrix tmp = a.pow(n - 1);
        cout << (tmp[0][0] + tmp[0][1]) % mod << '\n';
    }
}
------------------------------------------------------------------------------------
Quay lui sinh các dãy nhị phân độ dài n
------------------------------------------------------------------------------------
string s;
int x[16];
vector<string> v;
void in() {
	string st = "";
	for (int i = 1; i <= N; i++) {
		if (x[i] == 1) {
			st += s[i-1];
		}
	}
	if (st.size() != 0)
		v.push_back(st);
}
void deQuy(int i) {
	for (int j = 0; j <= 1; j++) {
		x[i] = j;
		if (i == N)
			in();
		else
			deQuy(i + 1);

	}
}
------------------------------------------------------------------------------------
Segment Tree
------------------------------------------------------------------------------------
#include <bits/stdc++.h>
#define maxn 100001
using namespace std;
int n, m, a[maxn];
int T[4*maxn], delta[4*maxn];
void init(int node, int L, int R){
	if (L == R){
		T[node] = a[L];
		return;
	}
	int mid = (L + R) / 2;
	init(node * 2, L, mid);
	init(node * 2 + 1, mid + 1, R);
	T[node] = min(T[node*2], T[node*2+1]);
}
void update (int node, int L, int R, int u, int v, int w){
	// tac dong viec tang doan u, v len doan co dinh [L, R]
	if (u > R || v < L){
		return;
	}
	if (u <= L && v >= R){
		delta[node] += w;
		T[node] += w;
		return;
	}
	int mid = (L + R) / 2;
	update(node * 2, L, mid, u, v, w); // trai
	update(node * 2 + 1, mid + 1, R, u, v, w); // phai
	T[node] = min(T[node*2], T[node*2+1]) + delta[node];

}
int getMin(int node, int L, int R, int u, int v){
	// Lay min phan giao giua [u, v] va [l, r]
	if (u > R || v < L) return 1000000001;
	if (L >= u && R <= v) return T[node]; // giao la [L, R]
	int mid = (L + R) / 2;
	int left = getMin(node * 2, L, mid, u, v);
	int right = getMin(node * 2 + 1, mid + 1, R, u, v);
	return min(left, right) + delta[node];
}
int main () {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	init(1, 1, n);
	for (int i = 1, type, u, v, w; i <= m; i++){
		scanf("%d%d%d", &type, &u, &v);
		if (type == 1){
			scanf("%d", &w);
			update(1, 1, n, u, v, w);
		}else{
			cout << getMin(1, 1, n, u, v) << "\n";
		}
	}
	return 0;
}
------------------------------------------------------------------------------------
Ghi ra các vị trí B xuất hiện trong A.
------------------------------------------------------------------------------------
Cách 1: HASH
typedef long long ll;

const int base = 31;
const ll MOD = 1000000003;
const ll maxn = 1000111;
using namespace std;
ll POW[maxn], hashT[maxn];
ll getHashT(int i,int j) {
    return (hashT[j] - hashT[i - 1] * POW[j - i + 1] + MOD * MOD) % MOD;
}
int main() {
    // Input
    string T, P;
    cin >> T >> P;
    // Initialize
    int lenT = T.size(), lenP = P.size();
    T = " " + T;
    P = " " + P;
    POW[0] = 1;
    // Precalculate base^i
    for (int i = 1; i <= lenT; i++)
    	POW[i] = (POW[i - 1] * base) % MOD;
    // Calculate hash value of T[1..i]
    for (int i = 1; i <= lenT; i++)
    	hashT[i] = (hashT[i - 1] * base + T[i] - 'a' + 1) % MOD;
    // Calculate hash value of P
    ll hashP=0;
    for (int i = 1; i <= lenP; i++)
    	hashP = (hashP * base + P[i] - 'a' + 1) % MOD;
    // Finding substrings of T equal to string P
    for (int i = 1; i <= lenT - lenP + 1; i++)
    	if (hashP == getHashT(i, i + lenP - 1))
    		printf("%d ", i);
}
Cách 2: KMP
using namespace std;
typedef pair<int, int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef vector<VI> VVI;
typedef vector<VII> VVII;
void KMP(string text,string pattern){
      int n = text.length(), m = pattern.length(), F[m+2],i,j;
      F[0] = F[1] = 0;
      for(int i = 2;i<=m;i++){
           j = F[i-1];
           while(true){
                if(pattern[j] == pattern[i-1]) { F[i] = j+1; break;}
                else if(j==0) {F[i] = 0; break;}
                else j = F[j];
           }
      }
      i = j = 0;
      while(j<n){
           if(text[j] == pattern[i]){
                i++; j++;
                if(i==m) printf("%d ",j-i+1);
           }
           else if(i>0) i = F[i];
           else j++;
      }
}
int main(){
     string a,b;
     cin>>a>>b;
     KMP(a,b);
}
------------------------------------------------------------------------------------
DFS
------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
int V, E, start;
std::vector<int> adj[100005];
bool visited[100005];
void dfs(int u){
	visited[u] = true;
	for (int i = 0; i < (int)adj[u].size(); ++i){
		int v = adj[u][i];
		if (!visited[v]) dfs(v);
	}
}
int main(){
	std::cin >> V >> E >> start;
	for (int i = 1; i <= E; ++i){
		int u, v;
		std::cin >> u >> v;
		adj[u].push_back(v);
	}
	dfs(start);
	for (int i = 1; i <= V; ++i){
		if (visited[i]) std::cout << i << ' ';
	}
}
------------------------------------------------------------------------------------
Binary search
------------------------------------------------------------------------------------
int binary_search(int A[], int sizeA, int target) {
    int lo = 1, hi = sizeA;
    while (lo <= hi) {
        int mid = lo + (hi - lo)/2;
        if (A[mid] == target)
            return mid;       	
        else if (A[mid] < target)
            lo = mid+1;
        else
            hi = mid-1;
    }
    // không tìm thấy giá trị target trong mảng A
    return -1;
} 
